// fputs: prints a string buffer into `fd`
fn fputs(int64 fd, string buf) int64 {
    ret write(fd, buf, strlen(buf));
}

// puts: prints string buffer into `stdout`
fn puts(string buf) {
    fputs(1, buf);
}

// eputs: prints string buffer into `stderr`
fn eputs(string buf) {
    fputs(2, buf);
}

// TODO: introduce `fputs` to print into `stderr`
// panic: prints an error message and exits with non-zero exit code
fn panic(string message)! {
    puts("panic: ");
    putsln(message);
    exit(1);
}

// nth: relatively safely gets a character from string by index
fn nth(string s, int64 index) char {
    if index < 0 || index >= strlen(s) {
        panic("index out of range");
    }

    ret s[index];
}

// streq: checks if two strings are equal or not
fn streq(string s1, string s2) bool {
    let n1: int64 = strlen(s1);
    let n2: int64 = strlen(s2);
    if n1 != n2 {
        ret false;
    }

    let i: int64 = 0;
    while i < n1 {
        if nth(s1, i) != nth(s2, i) {
            ret false;
        }
        i = i + 1;
    }

    ret true;
}

// putsln: prints a string with terminating new line to stdout
fn putsln(string s) {
    puts(s);
    puts("\n");
}

// putiln: prints an integer with terminating new line to stdout
fn putiln(int64 x) {
    puti(x);
    puts("\n");
}

// pow: calculates `x` to the power of `power`
fn pow(int64 x, int64 power) int64 {
    let result: int64 = 1;
    while power > 0 {
        result = result * x;
        power = power - 1;
    }
    ret result;
}
